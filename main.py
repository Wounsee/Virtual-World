import os
import logging
from dotenv import load_dotenv
import random
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from flask import Flask
import threading

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.environ.get("BOT_TOKEN")

# Flask app –¥–ª—è health checks
app = Flask(__name__)

@app.route('/')
def home():
    return "Telegram Bot is running!"

@app.route('/health')
def health():
    return "OK"

# –î–∞–Ω–Ω—ã–µ –æ –Ω–æ–º–µ—Ä–∞—Ö —Å —Ñ–ª–∞–≥–∞–º–∏
NUMBERS_DATA = {
    'usa': {'name': '‚Å∫¬π –ê–º–µ—Ä–∏–∫–∞ üá∫üá∏ [–≤–∏—Ä—Ç]', 'price': 55, 'code': '+1', 'type': '–≤–∏—Ä—Ç', 'country': '–ê–º–µ—Ä–∏–∫–∞', 'flag': 'üá∫üá∏ '},
    'myanmar': {'name': '‚Å∫‚Åπ‚Åµ –ú—å—è–Ω–º–∞ üá≤üá≤ [–≤–∏—Ä—Ç]', 'price': 50, 'code': '+95', 'type': '–≤–∏—Ä—Ç', 'country': '–ú—å—è–Ω–º–∞', 'flag': 'üá≤üá≤ '},
    'india': {'name': '‚Å∫‚Åπ¬π –ò–Ω–¥–∏—è üáÆüá≥ [–≤–∏—Ä—Ç]', 'price': 50, 'code': '+91', 'type': '–≤–∏—Ä—Ç', 'country': '–ò–Ω–¥–∏—è', 'flag': 'üáÆüá≥ '},
    'mexico': {'name': '‚Å∫‚Åµ¬≤ –ú–µ–∫—Å–∏–∫–∞ üá≤üáΩ [–≤–∏—Ä—Ç]', 'price': 50, 'code': '+52', 'type': '–≤–∏—Ä—Ç', 'country': '–ú–µ–∫—Å–∏–∫–∞', 'flag': 'üá≤üáΩ '},
    'argentina': {'name': '‚Å∫‚Åµ‚Å¥ –ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞ üá¶üá∑ [–≤–∏—Ä—Ç]', 'price': 50, 'code': '+54', 'type': '–≤–∏—Ä—Ç', 'country': '–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞', 'flag': 'üá¶üá∑ '},
    'bangladesh': {'name': '‚Å∫‚Å∏‚Å∏‚Å∞ –ë–∞–Ω–≥–ª–∞–¥–µ—à üáßüá© [–≤–∏—Ä—Ç]', 'price': 65, 'code': '+880', 'type': '–≤–∏—Ä—Ç', 'country': '–ë–∞–Ω–≥–ª–∞–¥–µ—à', 'flag': 'üáßüá© '},
    'ukraine': {'name': '‚Å∫¬≥‚Å∏‚Å∞ –£–∫—Ä–∞–∏–Ω–∞ üá∫üá¶ [—Ñ–∏–∑]', 'price': 100, 'code': '+380', 'type': '—Ñ–∏–∑', 'country': '–£–∫—Ä–∞–∏–Ω–∞', 'flag': 'üá∫üá¶ '},
    'belarus': {'name': '‚Å∫¬≥‚Å∑‚Åµ –ë–µ–ª–∞—Ä—É—Å—å üáßüáæ [—Ñ–∏–∑]', 'price': 110, 'code': '+375', 'type': '—Ñ–∏–∑', 'country': '–ë–µ–ª–∞—Ä—É—Å—å', 'flag': 'üáßüáæ '},
    'tajikistan': {'name': '‚Å∫‚Åπ‚Åπ¬≤ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω üáπüáØ [—Ñ–∏–∑]', 'price': 150, 'code': '+992', 'type': '—Ñ–∏–∑', 'country': '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω', 'flag': 'üáπüáØ '},
    'uzbekistan': {'name': '‚Å∫‚Åπ‚Åπ‚Å∏ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω üá∫üáø [—Ñ–∏–∑]', 'price': 100, 'code': '+998', 'type': '—Ñ–∏–∑', 'country': '–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω', 'flag': 'üá∫üáø '}
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –∏ –∑–∞–∫–∞–∑–æ–≤
active_numbers = {}
pending_orders = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
    for key, data in NUMBERS_DATA.items():
        keyboard.append([InlineKeyboardButton(data['name'] + f" - {data['price']}‚ÇΩ", callback_data=key)])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = (
        "üìû *–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞:*")
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    selected_country = query.data
    country_data = NUMBERS_DATA[selected_country]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['selected_country'] = selected_country
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ –Ω–æ–º–µ—Ä–∞
    processing_text = (
        f"üîç *–ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è {country_data['country']}...*\n"
    )
    
    processing_message = await query.edit_message_text(processing_text, parse_mode='Markdown')
    
    # –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞
    await asyncio.sleep(1)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    phone_number = generate_phone_number(country_data['code'])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = query.from_user.id
    order_id = f"order_{user_id}_{datetime.now().strftime('%Y%m%d%H%M%S')}"
    
    pending_orders[order_id] = {
        'user_id': user_id,
        'number': phone_number,
        'country': selected_country,
        'price': country_data['price'],
        'status': 'pending',
        'created_at': datetime.now(),
        'chat_id': query.message.chat_id,
        'message_id': query.message.message_id
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –Ω–æ–º–µ—Ä–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
    number_text = (
        f"‚åÅ *–ù–æ–º–µ—Ä:* `{phone_number}`\n"
        f"‚åÅ {country_data['flag']}*{country_data['country']}*\n\n"
        f"‚òõ [–ö –æ–ø–ª–∞—Ç–µ {country_data['price']:.2f}‚ÇΩ](https://platega.io)"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    payment_keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url="https://platega.io")],
        [InlineKeyboardButton("‚óÄÔ∏è –ú–µ–Ω—é", callback_data="back_to_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(payment_keyboard)
    
    await query.edit_message_text(number_text, reply_markup=reply_markup, parse_mode='Markdown', disable_web_page_preview=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    if context.application.job_queue:
        context.application.job_queue.run_once(
            check_payment_auto, 
            3, 
            data={'order_id': order_id}
        )
    else:
        # –ï—Å–ª–∏ JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        await asyncio.sleep(15)
        await process_payment_success(context.bot, order_id)

async def check_payment_auto(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã"""
    job_data = context.job.data
    order_id = job_data['order_id']
    
    await process_payment_success(context.bot, order_id)

async def process_payment_success(bot, order_id: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    if order_id in pending_orders:
        order_data = pending_orders[order_id]
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—á–∏—Ç–∞–µ–º –æ–ø–ª–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        user_id = order_data['user_id']
        phone_number = order_data['number']
        country_data = NUMBERS_DATA[order_data['country']]
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä
        active_numbers[user_id] = {
            'number': phone_number,
            'country': order_data['country'],
            'expires_at': datetime.now() + timedelta(hours=1)
        }
        
        # –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
        success_text = (
            "‚úÖ *–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!*\n\n"
            f"‚òõ *–í–∞—à –Ω–æ–º–µ—Ä:* `{phone_number}`\n"
            f"‚åÅ {country_data['flag']}*{country_data['country']}*\n\n"
            "*–ù–æ–º–µ—Ä –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞.*\n"
            "_–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–µ–≥–æ –ø–æ—Å—Ç—É–ø–∞—Ç—å –Ω–µ —Å–º–æ–≥—É—Ç._\n\n"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
        await bot.edit_message_text(
            chat_id=order_data['chat_id'],
            message_id=order_data['message_id'],
            text=success_text,
            parse_mode='Markdown'
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–¥–æ–º —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
        await asyncio.sleep(4)
        await send_telegram_code_message(bot, order_data['chat_id'])
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è
        del pending_orders[order_id]

async def send_telegram_code_message(bot, chat_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–¥–æ–º –æ—Ç Telegram"""
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π 5-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
    code = ''.join([str(random.randint(0, 9)) for _ in range(5)])
    
    code_message = (
        "_–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç:_ `Telegram`\n\n"
        f"*–ö–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Telegram: {code}.* –ù–µ –¥–∞–≤–∞–π—Ç–µ –∫–æ–¥ –Ω–∏–∫–æ–º—É, –¥–∞–∂–µ –µ—Å–ª–∏ –µ–≥–æ —Ç—Ä–µ–±—É—é—Ç –æ—Ç –∏–º–µ–Ω–∏ Telegram!"
    )
    
    await bot.send_message(
        chat_id=chat_id,
        text=code_message,
        parse_mode='Markdown'
    )

async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"""
    query = update.callback_query
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ –∑–∞–ø—Ä–æ—Å
    try:
        await query.answer()
    except Exception:
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω
    keyboard = []
    for key, data in NUMBERS_DATA.items():
        keyboard.append([InlineKeyboardButton(data['name'] + f" - {data['price']}‚ÇΩ", callback_data=key)])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    menu_text = "*–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞:*"
    
    await query.edit_message_text(menu_text, reply_markup=reply_markup, parse_mode='Markdown')

def generate_phone_number(country_code: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —á–∞—Å—Ç—å –Ω–æ–º–µ—Ä–∞
    if country_code == '+1':  # –°–®–ê
        number = ''.join([str(random.randint(0, 9)) for _ in range(10)])
    elif country_code == '+380':  # –£–∫—Ä–∞–∏–Ω–∞
        number = '97' + ''.join([str(random.randint(0, 9)) for _ in range(7)])
    elif country_code == '+375':  # –ë–µ–ª–∞—Ä—É—Å—å
        number = '29' + ''.join([str(random.randint(0, 9)) for _ in range(7)])
    elif country_code == '+998':  # –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω
        number = '99' + ''.join([str(random.randint(0, 9)) for _ in range(7)])
    elif country_code == '+992':  # –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω
        number = '98' + ''.join([str(random.randint(0, 9)) for _ in range(7)])
    else:  # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
        number = ''.join([str(random.randint(0, 9)) for _ in range(9)])
    
    return f"{country_code}{number}"

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "ü§ñ *–ë–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤*\n\n"
    )

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞"""
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)

def run_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(handle_back, pattern="^back_to_menu$"))
    application.add_handler(CallbackQueryHandler(handle_selection))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    run_bot()

if __name__ == "__main__":
    main()
